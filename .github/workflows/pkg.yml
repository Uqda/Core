name: Packages

on:
  push:
    tags: ['v*']         # يبني تلقائيًا عند دفع وسم يبدأ بـ v
  workflow_dispatch:     # تشغيل يدوي عند الحاجة

permissions:
  contents: write        # ضروري لرفع الأصول على صفحة Releases

env:
  APP_NAME: uqda

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos:   [linux]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: '1.22' }
      - name: Build
        run: |
          VERSION="${GITHUB_REF_NAME}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -v -ldflags "-s -w \
            -X github.com/Uqda/Core/src/version.BuildName=$APP_NAME \
            -X github.com/Uqda/Core/src/version.BuildVersion=$VERSION" \
            -o $APP_NAME ./cmd/uqda
          tar -czf ${APP_NAME}-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz $APP_NAME
      - uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.goarch }}
          path: "${{ env.APP_NAME }}-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz"

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    strategy:
      matrix:
        goos:   [darwin]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: '1.22' }
      - name: Build
        run: |
          VERSION="${GITHUB_REF_NAME}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -v -ldflags "-s -w \
            -X github.com/Uqda/Core/src/version.BuildName=$APP_NAME \
            -X github.com/Uqda/Core/src/version.BuildVersion=$VERSION" \
            -o $APP_NAME ./cmd/uqda
          tar -czf ${APP_NAME}-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz $APP_NAME
      - uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.goarch }}
          path: "${{ env.APP_NAME }}-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz"

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    strategy:
      matrix:
        goarch: [amd64, 386, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: '1.22' }
      - name: Build
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME}"
          GOOS=windows GOARCH=${{ matrix.goarch }} \
          go build -v -ldflags "-s -w \
            -X github.com/Uqda/Core/src/version.BuildName=$APP_NAME \
            -X github.com/Uqda/Core/src/version.BuildVersion=$VERSION" \
            -o ${APP_NAME}.exe ./cmd/uqda
          7z a ${APP_NAME}-${VERSION}-windows-${{ matrix.goarch }}.zip ${APP_NAME}.exe
      - uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.goarch }}
          path: "${{ env.APP_NAME }}-${{ github.ref_name }}-windows-${{ matrix.goarch }}.zip"

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Flatten
        run: |
          shopt -s globstar
          mkdir out
          mv dist/**/** out/ || true
      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: out/**
